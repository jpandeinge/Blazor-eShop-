@page "/products"
@using System.Net.Http.Json

@inject ISearchProduct searchProduct
@inject HttpClient httpClient


<MudTable ServerData="@(new Func<TableState,Task<TableData<Product>>>(ServerReload))" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudToolBarSpacer/>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Product">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="brand_field" T="Product">Brand</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="price_field" T="Product">Price</MudTableSortLabel></MudTh>
    </HeaderContent>
    
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Brand</MudTd>
        <MudTd DataLabel="Molar mass">@context.Price</MudTd>
    </RowTemplate>
    
    <PagerContent>
            <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    // private IEnumerable<Product> products;

    private IEnumerable<Product> pageData;
    private MudTable<Product> table;


    private int totalItems;
    private string searchString = null;


    private async Task<TableData<Product>> ServerReload(TableState state)
    {
        IEnumerable<Product> data = await httpClient.GetFromJsonAsync<List<Product>>("api/v1/products");
        data = data.Where(product =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
            {
                return true;
            }
            if (product.Brand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            if (product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            if ($"{product.Price}".Contains(searchString))
            {
                return true;
            }
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
                
            case "brand_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Brand);
                break;
            case "price_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Price);
                break;
        }

        pageData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Product>() {TotalItems = totalItems, Items = pageData};
    }
    
    
    
    public void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();

    }
    
}